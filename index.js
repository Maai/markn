// Generated by CoffeeScript 1.9.3
(function() {
  var Index, M, Menu, MenuItem, Watcher, app, dialog, fs, remote, update, watch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  remote = require('remote');

  app = remote.require('app');

  Menu = remote.require('menu');

  MenuItem = remote.require('menu-item');

  dialog = remote.require('dialog');

  Watcher = remote.require('./watcher');

  fs = remote.require('fs');

  update = require('./renderer').update;

  watch = require('chokidar').watch;

  Index = (function() {
    function Index() {
      new M();
    }

    return Index;

  })();

  M = (function() {
    function M() {
      this.onFileOpenClicked = bind(this.onFileOpenClicked, this);
      this.onQuitClicked = bind(this.onQuitClicked, this);
      Menu.setApplicationMenu(Menu.buildFromTemplate(this.template()));
    }

    M.prototype.template = function() {
      return [
        {
          submenu: [
            {
              label: 'Quit',
              accelerator: 'Command+Q',
              click: this.onQuitClicked
            }
          ]
        }, {
          label: 'File',
          submenu: [
            {
              label: 'Open',
              accelerator: 'Command+O',
              click: this.onFileOpenClicked
            }
          ]
        }, {
          label: 'Display',
          submenu: [
            {
              label: 'Open Dev Tools',
              accelerator: 'Command+Alt+I',
              click: function() {
                return remote.getCurrentWindow().openDevTools();
              }
            }
          ]
        }
      ];
    };

    M.prototype.onQuitClicked = function(e) {
      return app.quit();
    };

    M.prototype.onFileOpenClicked = function(e) {
      return dialog.showOpenDialog({
        properties: ['openFile']
      }, (function(_this) {
        return function(arg) {
          var filename;
          filename = arg[0];
          if (_this.w != null) {
            _this.w.removeAllListeners();
            _this.w.close();
          }
          _this.w = watch(filename);
          _this.w.on('change', _this.render);
          return _this.render(filename);
        };
      })(this));
    };

    M.prototype.render = function(filename) {
      console.log(filename);
      return fs.readFile(filename, 'utf8', function(err, data) {
        if (err != null) {
          return;
        }
        return update(data);
      });
    };

    return M;

  })();

  new Index();

}).call(this);
