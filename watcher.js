// Generated by CoffeeScript 1.9.3
(function() {
  var EventEmitter, Watcher, basename, fs,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events');

  fs = require('fs');

  basename = require('path').basename;

  module.exports = Watcher = (function(superClass) {
    extend(Watcher, superClass);

    function Watcher() {
      return Watcher.__super__.constructor.apply(this, arguments);
    }

    Watcher.prototype.watch = function(filename) {
      this.close();
      console.log('watch:', filename);
      return this.w = fs.watch(filename, (function(_this) {
        return function(e, f) {
          console.log('watche change');
          return fs.readFile(filename, 'utf8', function(err, data) {
            console.log(err, data);
            if (err != null) {
              _this.emit('error', err);
              return;
            }
            return _this.emit('change', data);
          });
        };
      })(this));
    };

    Watcher.prototype.close = function() {
      if (this.w == null) {
        return;
      }
      this.w.close();
      return delete this.w;
    };

    return Watcher;

  })(EventEmitter);

}).call(this);
